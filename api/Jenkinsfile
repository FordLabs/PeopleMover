pipeline {
    agent any
    environment {
        BRANCH_NAME_WITHOUT_UNDERSCORES = "${env.BRANCH_NAME}".replaceAll("_", "")
        NPM_ENVIRONMENT = getNpmEnvironment(BRANCH_NAME_WITHOUT_UNDERSCORES)
        MANIFEST = getManifest(BRANCH_NAME_WITHOUT_UNDERSCORES)
    }
    tools {
        jdk 'openjdk-11-jdk'
        nodejs 'node'
    }
    stages {
        stage('Npm Install') {
            steps {
                dir("ui") {
                    sh "npm install"
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('API Test') {
                    steps {
                        dir("api") {
                            sh "./gradlew clean test"
                        }
                    }
                }

                stage('UI Test') {
                    steps {
                        dir("ui") {
                            sh "CI=true npm run test"
                        }
                    }
                }

            }
        }

        stage('Build') {
            parallel {
                stage('API Build') {
                    steps {
                        dir("api") {
                            sh "./gradlew assemble"
                        }
                    }
                }
                stage('UI Build') {
                    steps {
                        dir("ui") {
                            sh "${env.NPM_ENVIRONMENT} npm run build"
                        }
                    }
                }
            }
        }

         stage('Deploy Branch') {
            parallel {
                stage('API Branch Deploy') {
                    when {
                        not {
                            anyOf {
                                branch 'master';
                                branch 'stage'
                            }
                        }
                    }
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'flipJenkins', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_PASSWORD'),
                            usernamePassword(credentialsId: 'peopleMoverDB', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
                        ]) {
                            dir("api") {
                                sh 'echo Pushing to Cloud Foundry'
                                sh """./gradlew cf-push-blue-green \
                                        -PbranchNameWithoutUnderscores=Branch \
                                        -Pcf.name=${env.BRANCH_NAME_WITHOUT_UNDERSCORES} \
                                        -Pcf.host=${env.BRANCH_NAME_WITHOUT_UNDERSCORES} \
                                        -Pcf.ccHost=$peoplemover_pcf_cchost \
                                        -Pcf.domain=$peoplemover_pcf_domain \
                                        -Pcf.ccUser=$JENKINS_USER \
                                        -Pcf.ccPassword=$JENKINS_PASSWORD \
                                        -Pcf.environment.authquest.client_id=$authquest_qa_client_id \
                                        -Pcf.environment.authquest.client_secret=$authquest_qa_client_secret \
                                        -Pcf.environment.authquest.url=$authquest_qa_url \
                                        -Pcf.environment.spring.security.oauth2.resourceserver.jwt.issuer-uri=$spring_security_oauth2_resourceserver_jwt_issuer_uri \
                                        -Pcf.environment.adfs-resource-uri=$adfs_resource_uri \
                                        -Pcf.environment.react.app.url=https://${env.BRANCH_NAME_WITHOUT_UNDERSCORES}.$peoplemover_pcf_org \
                                        -Pcf.environment.react.app.authquest_url=$authquest_qa_url \
                                        -Pcf.environment.react.app.authquest_client_id=$authquest_qa_client_id \
                                        -Pcf.environment.react.app.auth_enabled=false \
                                        -Pcf.environment.react.app.invite_users_to_space_enabled=true \
                                        -Pcf.environment.react.app.adfs_enabled=true \
                                        -Pcf.environment.react.app.adfs_url_template="$adfs_url_template" \
                                        -Pcf.environment.react.app.adfs_client_id=$adfs_client_id \
                                        -Pcf.environment.react.app.adfs_resource=$adfs_resource \
                                """.stripIndent()
                            }
                        }
                    }
                }

                stage('UI Deploy Test Instances') {
                    when {
                        not {
                            anyOf {
                                branch 'master'
                                branch 'stage'
                                branch 'dev'
                            }
                        }
                    }
                    steps {
                        dir("ui") {
                            pushToCloudFoundry(
                                target: "$peoplemover_pcf_cchost",
                                organization: 'FordLabs_Experiments_InternalProjects_EDC1_Prod',
                                cloudSpace: 'FordLabs_Experiments_InternalProjects-prod',
                                credentialsId: 'flipJenkins',
                                manifestChoice: [
                                    manifestFile: "${env.MANIFEST}",
                                ],
                            )
                        }
                    }
                }
            }
        }


        stage("Deploy") {
            parallel {
                stage('API Deploy Stage') {
                    when {
                        branch 'stage'
                    }
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'flipJenkins', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_PASSWORD'),
                            usernamePassword(credentialsId: 'peopleMoverDB', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
                        ]) {
                            dir("api") {
                                sh 'echo Pushing to Cloud Foundry'
                                sh """./gradlew cf-push-blue-green \
                                        -PbranchNameWithoutUnderscores=Stage \
                                        -Pcf.name=StagePeopleMover \
                                        -Pcf.host=stagepeoplemover \
                                        -Pcf.ccHost=$peoplemover_pcf_cchost \
                                        -Pcf.domain=$peoplemover_pcf_domain \
                                        -Pcf.ccUser=$JENKINS_USER \
                                        -Pcf.ccPassword=$JENKINS_PASSWORD \
                                        -Pcf.environment.authquest.client_id=$authquest_qa_client_id \
                                        -Pcf.environment.authquest.client_secret=$authquest_qa_client_secret \
                                        -Pcf.environment.authquest.url=$authquest_qa_url \
                                        -Pcf.environment.react.app.url=https://stagepeoplemover.$peoplemover_pcf_org \
                                        -Pcf.environment.react.app.authquest_url=$authquest_qa_url \
                                        -Pcf.environment.react.app.authquest_client_id=$authquest_qa_client_id \
                                        -Pcf.environment.react.app.auth_enabled=true \
                                        -Pcf.environment.react.app.invite_users_to_space_enabled=true \
                                        -Pcf.environment.react.app.adfs_enabled=false \
                                """.stripIndent()
                            }
                        }
                    }
                }
                stage('API Deploy Prod') {
                    when {
                        branch 'master'
                    }
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'flipJenkins', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_PASSWORD'),
                            usernamePassword(credentialsId: 'peopleMoverDB', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
                        ]) {
                            dir("api") {
                                sh 'echo Pushing to Cloud Foundry'
                                sh """./gradlew cf-push-blue-green \
                                        -PbranchNameWithoutUnderscores=Prod \
                                        -Pcf.name=PeopleMover2 \
                                        -Pcf.host=peoplemover2 \
                                        -Pcf.ccUser=$JENKINS_USER \
                                        -Pcf.ccPassword=$JENKINS_PASSWORD \
                                        -Pcf.ccHost=$peoplemover_pcf_cchost \
                                        -Pcf.domain=$peoplemover_pcf_domain \
                                        -Pcf.environment.authquest.client_id=$authquest_prod_client_id \
                                        -Pcf.environment.authquest.client_secret=$authquest_prod_client_secret \
                                        -Pcf.environment.authquest.url=$authquest_prod_url \
                                        -Pcf.environment.react.app.url=https://peoplemover2.$peoplemover_pcf_org \
                                        -Pcf.environment.react.app.authquest_url=$authquest_prod_url \
                                        -Pcf.environment.react.app.authquest_client_id=$authquest_prod_client_id \
                                        -Pcf.environment.react.app.auth_enabled=true \
                                        -Pcf.environment.react.app.invite_users_to_space_enabled=true \
                                        -Pcf.environment.react.app.adfs_enabled=false \
                                """.stripIndent()
                            }
                        }
                    }
                }


                stage('UI Deploy') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'stage'
                            branch 'dev'
                        }
                    }
                    steps {
                        dir("ui") {
                            pushToCloudFoundry(
                                target: "$peoplemover_pcf_cchost",
                                organization: 'FordLabs_Experiments_InternalProjects_EDC1_Prod',
                                cloudSpace: 'FordLabs_Experiments_InternalProjects-prod',
                                credentialsId: 'flipJenkins',
                                manifestChoice: [
                                    manifestFile: "${env.MANIFEST}",
                                ]
                            )
                        }
                    }
                }
            }
        }
    }
}

def getNpmEnvironment(branchName) {
    if (branchName == "dev" || branchName == "stage") {
        return """REACT_APP_URL=https://stagepeoplemover.$peoplemover_pcf_org \
                  REACT_APP_AUTHQUEST_URL=$authquest_qa_url \
                  REACT_APP_AUTHQUEST_CLIENT_ID=$authquest_qa_client_id \
                  REACT_APP_AUTH_ENABLED=true \
                  REACT_APP_INVITE_USERS_TO_SPACE_ENABLED=true \
                  REACT_APP_ADFS_ENABLED=false \
                  REACT_APP_ADFS_URL_TEMPLATE="$adfs_url_template" \
                  REACT_APP_ADFS_CLIENT_ID=$adfs_client_id \
                  REACT_APP_ADFS_RESOURCE=$adfs_resource \
                """.stripIndent()
    } else if (branchName == "master") {
        return """REACT_APP_URL=https://peoplemover2.$peoplemover_pcf_org \
                  REACT_APP_AUTHQUEST_URL=$authquest_prod_url \
                  REACT_APP_AUTHQUEST_CLIENT_ID=$authquest_prod_client_id \
                  REACT_APP_AUTH_ENABLED=true \
                  REACT_APP_INVITE_USERS_TO_SPACE_ENABLED=true \
                  REACT_APP_ADFS_ENABLED=false \
                  REACT_APP_ADFS_URL_TEMPLATE="$adfs_url_template" \
                  REACT_APP_ADFS_CLIENT_ID=$adfs_client_id \
                  REACT_APP_ADFS_RESOURCE=$adfs_resource \
                """.stripIndent()
    } else {
        return """REACT_APP_URL=https://$branchName.$peoplemover_pcf_org \
                  REACT_APP_AUTHQUEST_URL=$authquest_qa_url \
                  REACT_APP_AUTHQUEST_CLIENT_ID=$authquest_qa_client_id \
                  REACT_APP_AUTH_ENABLED=true \
                  REACT_APP_INVITE_USERS_TO_SPACE_ENABLED=true \
                  REACT_APP_ADFS_ENABLED=true \
                  REACT_APP_ADFS_URL_TEMPLATE="$adfs_url_template" \
                  REACT_APP_ADFS_CLIENT_ID=$adfs_client_id \
                  REACT_APP_ADFS_RESOURCE=$adfs_resource \
                """.stripIndent()
    }
}

def getManifest(branchName) {
    if (branchName == "dev") {
        return 'manifest_QA.yml'
    } else if (branchName == "stage") {
        return 'manifest_Stage.yml'
    } else if (branchName == "master"){
        return 'manifest.yml'
    } else {
        def filename = 'ui/manifest_QA.yml'
        def data = readYaml file: filename
        data.applications.get(0).name = "${branchName}UI"

        sh "rm $filename"
        writeYaml file: filename, data: data
        return 'manifest_QA.yml'
    }
}
