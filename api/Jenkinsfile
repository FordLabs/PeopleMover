pipeline {
    agent any
    environment {
        NPM_ENVIRONMENT = getNpmEnvironment()
        MANIFEST = getManifest()
    }
    tools {
        jdk 'openjdk-11-jdk'
        nodejs 'node'
    }
    stages {
        stage('API Test') {
            steps {
                dir("api") {
                    sh "./gradlew clean test"
                }
            }
        }

        stage('API Build') {
            steps {
                dir("api") {
                    sh "./gradlew assemble"
                }
            }
        }

        stage('API Analyze') {
            when {
                anyOf {
                    branch 'master'
                    branch 'stage'
                }
            }
            steps {
                withSonarQubeEnv('FordLabs SonarQube') {
                    dir("api") {
                        sh './gradlew sonarqube'
                    }
                }
            }
        }

        stage('Npm Install') {
            steps {
                dir("ui") {
                    sh "npm install"
                }
            }
        }

        stage('UI Test') {
            steps {
                dir("ui") {
                    sh "CI=true npm run test"
                }
            }
        }

        stage('UI Build') {
            steps {
                dir("ui") {
                    sh "${env.NPM_ENVIRONMENT} npm run build"
                }
            }
        }

        stage('UI Analyze') {
            when {
                anyOf {
                    branch 'master'
                    branch 'stage'
                }
            }
            steps {
                withSonarQubeEnv('FordLabs SonarQube') {
                    dir("ui") {
                        sh "npm run coverage"
                        sh "npm run analyze"
                    }
                }
            }
        }

        stage('API Deploy Stage') {
            when {
                branch 'stage'
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'flipJenkins', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_PASSWORD'),
                    usernamePassword(credentialsId: 'peopleMoverDB', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
                ]) {
                    dir("api") {
                        sh 'echo Pushing to Cloud Foundry'
                        sh """./gradlew cf-push-blue-green \
                                -Pcf.name=StagePeopleMover \
                                -Pcf.host=stagepeoplemover \
                                -Pcf.ccHost=$peoplemover_pcf_cchost \
                                -Pcf.domain=$peoplemover_pcf_domain \
                                -Pcf.ccUser=$JENKINS_USER \
                                -Pcf.ccPassword=$JENKINS_PASSWORD \
                                -Pcf.environment.spring.datasource.username=$DB_USER \
                                -Pcf.environment.spring.datasource.password=$DB_PASSWORD \
                                -Pcf.environment.spring.datasource.url="jdbc:sqlserver://$peoplemover_db_ip;databaseName=PeopleMoverQA" \
                                -Pcf.environment.authquest.client_id=$authquest_qa_client_id \
                                -Pcf.environment.authquest.client_secret=$authquest_qa_client_secret \
                                -Pcf.environment.authquest.url=$authquest_qa_url \
                           """.stripIndent()
                   }
                }
            }
        }
        stage('API Deploy Prod') {
            when {
                branch 'master'
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'flipJenkins', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_PASSWORD'),
                    usernamePassword(credentialsId: 'peopleMoverDB', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
                ]) {
                    dir("api") {
                        sh 'echo Pushing to Cloud Foundry'
                        sh """./gradlew cf-push-blue-green \
                                -Pcf.ccUser=$JENKINS_USER \
                                -Pcf.ccPassword=$JENKINS_PASSWORD \
                                -Pcf.ccHost=$peoplemover_pcf_cchost \
                                -Pcf.domain=$peoplemover_pcf_domain \
                                -Pcf.environment.spring.datasource.username=$DB_USER \
                                -Pcf.environment.spring.datasource.password=$DB_PASSWORD \
                                -Pcf.environment.spring.datasource.url="jdbc:sqlserver://$peoplemover_db_ip;databaseName=PeopleMover" \
                                -Pcf.environment.authquest.client_id=$authquest_prod_client_id \
                                -Pcf.environment.authquest.client_secret=$authquest_prod_client_secret \
                                -Pcf.environment.authquest.url=$authquest_prod_url \
                           """.stripIndent()
                   }
                }
            }
        }

        stage('UI Deploy') {
            when {
                anyOf {
                    branch 'master'
                    branch 'stage'
                    branch 'dev'
                }
            }
            steps {
                dir("ui") {
                    pushToCloudFoundry(
                        target: "$peoplemover_pcf_cchost",
                        organization: 'FordLabs_Experiments_InternalProjects_EDC1_Prod',
                        cloudSpace: 'FordLabs_Experiments_InternalProjects-prod',
                        credentialsId: 'flipJenkins',
                        manifestChoice: [
                            manifestFile: "${env.MANIFEST}",
                        ]
                    )
                }
            }
        }
    }
}

def getNpmEnvironment() {
    def branchName = "${env.BRANCH_NAME}"
    if (branchName == "dev" || branchName == "stage") {
        return """REACT_APP_URL=https://stagepeoplemover.$peoplemover_pcf_org \
                  REACT_APP_AUTHQUEST_URL=$authquest_qa_url \
                  REACT_APP_AUTHQUEST_CLIENT_ID=$authquest_qa_client_id \
                  REACT_APP_AUTH_ENABLED=false \
                  REACT_APP_INVITE_USERS_TO_SPACE_ENABLED=true \
                """.stripIndent()
    } else if (branchName == "master") {
        return """REACT_APP_URL=https://peoplemover.$peoplemover_pcf_org \
                  REACT_APP_AUTHQUEST_URL=$authquest_prod_url \
                  REACT_APP_AUTHQUEST_CLIENT_ID=$authquest_prod_client_id \
                  REACT_APP_AUTH_ENABLED=false \
                  REACT_APP_INVITE_USERS_TO_SPACE_ENABLED=false \
                """.stripIndent()
    } else {
        return ' '
    }
}

def getManifest() {
    def branchName = "${env.BRANCH_NAME}"
    if (branchName == "dev") {
        return 'manifest_QA.yml'
    } else if (branchName == "stage") {
        return 'manifest_Stage.yml'
    } else {
        return 'manifest.yml'
    }
}
